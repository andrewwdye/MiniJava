
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\004\000\002\005\012\000\002\006\004" +
    "\000\002\007\005\000\002\010\004\000\002\011\021\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\004\000\002\014\005\000\002\014" +
    "\011\000\002\014\007\000\002\014\007\000\002\014\006" +
    "\000\002\014\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\004\006\001\002\000\004\002\135\001" +
    "\002\000\004\004\070\001\002\000\002\001\002\000\004" +
    "\040\010\001\002\000\004\005\011\001\002\000\004\006" +
    "\012\001\002\000\004\007\013\001\002\000\004\010\014" +
    "\001\002\000\004\035\015\001\002\000\004\015\016\001" +
    "\002\000\004\042\017\001\002\000\004\043\020\001\002" +
    "\000\002\001\002\000\004\036\022\001\002\000\004\040" +
    "\023\001\002\000\012\022\027\024\026\025\030\040\024" +
    "\001\002\000\012\022\027\024\026\025\030\040\024\001" +
    "\002\000\004\041\061\001\002\000\004\035\055\001\002" +
    "\000\004\035\047\001\002\000\004\035\043\001\002\000" +
    "\006\030\032\042\033\001\002\000\002\001\002\000\002" +
    "\001\002\000\004\043\035\001\002\000\004\030\036\001" +
    "\002\000\002\001\002\000\004\037\040\001\002\000\016" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\040\uffee\041\uffee\001" +
    "\002\000\004\037\042\001\002\000\016\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\040\uffef\041\uffef\001\002\000\002\001" +
    "\002\000\004\036\045\001\002\000\004\037\046\001\002" +
    "\000\016\022\ufff0\023\ufff0\024\ufff0\025\ufff0\040\ufff0\041" +
    "\ufff0\001\002\000\002\001\002\000\004\036\051\001\002" +
    "\000\012\022\027\024\026\025\030\040\024\001\002\000" +
    "\004\023\053\001\002\000\012\022\027\024\026\025\030" +
    "\040\024\001\002\000\016\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\040\ufff2\041\ufff2\001\002\000\002\001\002\000\004" +
    "\036\057\001\002\000\012\022\027\024\026\025\030\040" +
    "\024\001\002\000\016\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\040\ufff1\041\ufff1\001\002\000\004\041\062\001\002\000" +
    "\004\004\uffff\001\002\000\012\022\027\024\026\025\030" +
    "\040\024\001\002\000\004\041\065\001\002\000\016\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\040\ufff3\041\ufff3\001\002" +
    "\000\006\012\ufff4\041\ufff4\001\002\000\004\004\070\001" +
    "\002\000\002\001\002\000\004\002\001\001\002\000\004" +
    "\011\073\001\002\000\002\001\002\000\004\040\075\001" +
    "\002\000\006\016\100\017\077\001\002\000\002\001\002" +
    "\000\002\001\002\000\004\042\130\001\002\000\002\001" +
    "\002\000\006\016\100\017\077\001\002\000\004\005\105" +
    "\001\002\000\004\041\126\001\002\000\006\016\100\017" +
    "\077\001\002\000\004\005\105\001\002\000\004\041\ufffa" +
    "\001\002\000\002\001\002\000\004\035\112\001\002\000" +
    "\006\016\100\017\077\001\002\000\002\001\002\000\002" +
    "\001\002\000\004\036\116\001\002\000\004\040\117\001" +
    "\002\000\006\016\100\017\077\001\002\000\012\022\027" +
    "\024\026\025\030\040\024\001\002\000\004\012\122\001" +
    "\002\000\002\001\002\000\004\037\124\001\002\000\004" +
    "\041\125\001\002\000\004\005\ufff9\001\002\000\004\004" +
    "\ufffd\001\002\000\014\005\ufffc\022\ufffc\024\ufffc\025\ufffc" +
    "\040\ufffc\001\002\000\004\043\131\001\002\000\002\001" +
    "\002\000\004\037\133\001\002\000\006\016\ufffb\017\ufffb" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\070\005\066\001\001\000\004\017\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\024\017\030\001\001\000\010\013\063\014" +
    "\062\017\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\040\001\001\000\004\015\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\047\001\001" +
    "\000\002\001\001\000\006\014\051\017\030\001\001\000" +
    "\002\001\001\000\006\014\053\017\030\001\001\000\002" +
    "\001\001\000\004\015\055\001\001\000\002\001\001\000" +
    "\006\014\057\017\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\065\014\062\017" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\133\005\066\001\001\000\004\017" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\073\001\001\000\002\001\001\000\012\006\102\007" +
    "\101\012\075\017\100\001\001\000\004\017\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\126\007\101\012\075\017\100\001\001\000\006" +
    "\010\103\011\105\001\001\000\002\001\001\000\006\012" +
    "\107\017\100\001\001\000\006\010\106\011\105\001\001" +
    "\000\002\001\001\000\004\017\110\001\001\000\002\001" +
    "\001\000\006\012\112\017\100\001\001\000\004\017\113" +
    "\001\001\000\004\016\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\117\007\101\012\075\017\100" +
    "\001\001\000\010\013\120\014\062\017\030\001\001\000" +
    "\002\001\001\000\004\015\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /* Override default error message routine to handle line numbers correctly */
  /* This routine is also called in the process of handling fatal errors. */

  /** Report a non fatal error (or warning).  This method takes a message
   *  string and an additional object (to be used by specializations
   *  implemented in subclasses).  Prints the same simple error message
   *  as the base class version, but correctly labels the line number.
   *
   * @param message an error message.
   * @param info    an extra object reserved for use by specialized subclasses.
   */
  public void report_error(String message, Object info)
    {
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
	if (((Symbol)info).left != -1)
	  System.err.println(" at line " + ((Symbol)info).left +
			     " of input");
	else System.err.println("");
      else System.err.println("");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MainClass ClassList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassList ::= Class ClassList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Class ::= CLASS Identifier EXTENDS Identifier LBRACE VarList MethodList RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Class",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarList ::= Var VarList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Var ::= Type Identifier SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MethodList ::= Method MethodList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Method ::= PUBLIC Type Identifier LPAREN Type Identifier IdentifierList RPAREN LBRACE VarList StatementList RETURN Expression SEMICOLON RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INT LBRACKET RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= Identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StatementList ::= Statement StatementList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= Identifier BECOMES Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
