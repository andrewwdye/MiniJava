/*
 * CUP specification for the parser for a simple demo language.
 * Change this into the parser for your implementation of MiniJava.
 * CSE 401/P501 Au11.
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Code in the following section is included in the generated parser */

parser code {:
  /* Override default error message routine to handle line numbers correctly */
  /* This routine is also called in the process of handling fatal errors. */

  /** Report a non fatal error (or warning).  This method takes a message
   *  string and an additional object (to be used by specializations
   *  implemented in subclasses).  Prints the same simple error message
   *  as the base class version, but correctly labels the line number.
   *
   * @param message an error message.
   * @param info    an extra object reserved for use by specialized subclasses.
   */
  public void report_error(String message, Object info)
    {
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
	if (((Symbol)info).left != -1)
	  System.err.println(" at line " + ((Symbol)info).left +
			     " of input");
	else System.err.println("");
      else System.err.println("");
    }
:};

/* end of code included in generated parser


/* Terminals (tokens returned by the scanner) */

/* reserved words: */
terminal CLASS, PUBLIC, STATIC, VOID, MAIN, EXTENDS, RETURN, THIS, NEW, LENGTH;
terminal STRING, INT, BOOLEAN, TRUE, FALSE;
terminal IF, ELSE, WHILE;
terminal PRINTLN;

/* operators: */
terminal PLUS, MINUS, BECOMES, AND, LESSTHAN, TIMES, NOT;

/* delimiters: */
terminal LPAREN, RPAREN, SEMICOLON, LBRACE, RBRACE, LBRACKET, RBRACKET, DOT, COMMA;

/* tokens with values: */
terminal String IDENTIFIER;
terminal Integer LITERAL;


/* Nonterminals */

nonterminal Program;
nonterminal MainClass;
nonterminal ClassList;
nonterminal Class;
nonterminal VarList;
nonterminal Var;
nonterminal MethodList;
nonterminal Method;
nonterminal Type;
nonterminal StatementList;
nonterminal Statement;
nonterminal ExpressionList;
nonterminal AdditionalExps;
nonterminal Expression;
nonterminal IdentifierList;
nonterminal AdditionalIds;
nonterminal Identifier;
nonterminal Operator;


/* Precedence declarations */

precedence left AND;
precedence left LESSTHAN;
precedence left PLUS, MINUS;
precedence left TIMES;


/* Productions */

Program        ::= MainClass ClassList;

MainClass      ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING
                   LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE;

ClassList      ::=
                 | Class ClassList;

Class          ::= CLASS Identifier EXTENDS Identifier LBRACE VarList
                   MethodList RBRACE;

VarList        ::=
                 | Var VarList;

Var            ::= Type Identifier SEMICOLON;

MethodList     ::=
                 | Method MethodList;

Method         ::= PUBLIC Type Identifier LPAREN IdentifierList RPAREN LBRACE
                   VarList StatementList RETURN Expression SEMICOLON RBRACE;

Type           ::= INT LBRACKET RBRACKET
                 | BOOLEAN
                 | INT
                 | Identifier;

StatementList  ::=
                 | Statement StatementList;

Statement      ::= LBRACE RBRACE
                 | LBRACE StatementList RBRACE
                 | IF LPAREN Expression RPAREN Statement ELSE Statement
                 | WHILE LPAREN Expression RPAREN Statement
                 | PRINTLN LPAREN Expression RPAREN SEMICOLON
                 | Identifier BECOMES Expression SEMICOLON
                 | Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON;

ExpressionList ::=
                 | Expression AdditionalExps;

AdditionalExps ::=
                 | COMMA Expression AdditionalExps;

Expression     ::= Expression Operator Expression
                 | Expression LBRACKET Expression RBRACKET
                 | Expression DOT LENGTH
                 | Expression DOT Identifier LPAREN ExpressionList RPAREN
                 | LITERAL
                 | TRUE
                 | FALSE
                 | Identifier
                 | THIS
                 | NEW INT LBRACKET Expression RBRACKET
                 | NEW Identifier LPAREN RPAREN
                 | NOT Expression
                 | LPAREN Expression RPAREN;

Operator       ::= AND | LESSTHAN | PLUS | MINUS | TIMES;

IdentifierList ::=
                 | Type Identifier AdditionalIds;

AdditionalIds  ::=
                 | COMMA Type Identifier AdditionalIds;

Identifier     ::= IDENTIFIER;
